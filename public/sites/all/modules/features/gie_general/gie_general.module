<?php
/**
 * @file
 * Code for the GIE General feature.
 */

include_once 'gie_general.features.inc';

/**
 * Implements hook_menu_alter().
 * - Alter title of 'User Account' link.
 * - Alter Dashboard so only logged in users see link. 
 */
function gie_general_menu_alter(&$items) {
  $items['user']['title callback'] = '_gie_general_welcome';
  $items['dashboard']['access callback'] = 'user_is_logged_in';
}

/**
 * Callback to generate dynamic Welcome text.
 */
function _gie_general_welcome() {
  if (user_is_logged_in()) {
    $user = entity_metadata_wrapper('user', $GLOBALS['user']);
    $first_name = $user->field_user_firstname->value();

    // Temporary if statement to place filled in name
    // TODO: remove this statement if first name becomes required
    if (!empty($first_name)) {
      $name = $first_name;
    } else {
      $name = $user->name->value();
    }
    return t('Welcome, ') . $name . '!';
  } else {
    return t('User account');
  }
}

/**
 * Implements hook_node_presave().
 * - Set node author to Point of Contact for
 * - new innovations/programs/organizations when
 * - point of contact field is empty upon node creation.
 */
function gie_general_node_presave($node) {
  switch($node->type) {
    case 'innovation':
      $wrapper = entity_metadata_wrapper('node', $node);
      $poc = $wrapper->field_innovation_poc->value();
      if (!$poc && !$node->nid) {
        $user = user_load($node->uid);
        $wrapper->field_innovation_poc->set($user);
      }
      break;
    case 'program':
      $wrapper = entity_metadata_wrapper('node', $node);
      $poc = $wrapper->field_program_poc->value();
      if (!$poc && !$node->nid) {
        $user = user_load($node->uid);
        $wrapper->field_program_poc->set($user);
      }
      break;
    case 'organization':
      $wrapper = entity_metadata_wrapper('node', $node);
      $poc = $wrapper->field_org_poc->value();
      if (!$poc && !$node->nid) {
        $user = user_load($node->uid);
        $wrapper->field_org_poc->set($user);
      }
      break;
  }
}
