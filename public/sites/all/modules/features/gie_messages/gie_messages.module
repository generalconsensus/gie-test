<?php
/**
 * @file
 * Code for the GIE Messages feature.
 */

include_once 'gie_messages.features.inc';

/**
 * Implements hook_comment_insert().
 * - Trigger Comment Notify message
 */
function gie_messages_comment_insert($comment) {
  $node = node_load($comment->nid);
  if ($comment->uid == $node->uid) {
    // Same comment author as node author
    return;
  }

  // Get User Notifications frequency field
  $notifier_name = _gie_messages_get_notifier_name($node->uid);
  if ($notifier_name == 'do_not_send') {
    // user set to not receive emails
    return;
  }

  $message = message_create('comment_notify', array('uid' => $node->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node_ref->set($node);
  $wrapper->field_comment_ref->set($comment);

  // Send message using Message Notify
  message_notify_send_message($message, array(), $notifier_name);
}

/**
 * Implements hook_flag_flag().
 * - Trigger Follow: User Notify message
 * - Trigger Favorite Notify message
 */
function gie_messages_flag_flag($flag, $content_id, $account, $flagging) {
  switch($flag->name) {
    case 'favorite':

      // Load node entity and check for node author
      $node = node_load($content_id);

      if ($account->uid == $node->uid) {
        // Author flagged own content, do nothing. Break statement now.
        break;
      }

      // Get notifier name based on node author
      $notifier_name = _gie_messages_get_notifier_name($node->uid);
      if ($notifier_name == 'do_not_send') {
        // user set to not receive emails, break statement
        break;
      }

      // Check for previous Favorite Notify messages
      $query = db_select('field_data_field_user_ref', 'u');
      $query->join('field_data_field_node_ref', 'n', 'u.entity_id=n.entity_id');
      $query->fields('u', array('entity_id', 'bundle', 'field_user_ref_target_id'));
      $query->fields('n', array('field_node_ref_target_id'));
      $query->condition('u.bundle','favorite_notify','=');
      $query->condition('u.field_user_ref_target_id',$account->uid,'=');
      $query->condition('n.field_node_ref_target_id',$content_id,'=');

      $result = $query->execute();
      if ($result->rowCount() > 0) {
        // Favorite Notify message has been previously created and sent
        // To prevent spam, do not create/send more. Break statement now.
        break;
      }

      // Set message entity
      $message = message_create('favorite_notify', array('uid' => $node->uid));
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_node_ref->set($node);
      $wrapper->field_flag_ref->set($flagging);
      $wrapper->field_user_ref->set($account);

      // Send message using Message Notify
      message_notify_send_message($message, array(), $notifier_name);

      break;
    case 'follow':

      if ($account->uid == $content_id) {
        // User flagged self, do nothing.
        break;
      }

      // Get notifier name based on user (content id)
      $notifier_name = _gie_messages_get_notifier_name($content_id);
      if ($notifier_name == 'do_not_send') {
        // user set to not receive emails, break statement
        break;
      }

      // Check for previous Follow: User Notify messages
      $query = db_select('field_data_field_user_ref', 'u');
      $query->join('message', 'm', 'u.entity_id=m.mid');
      $query->fields('u', array('entity_id', 'bundle', 'field_user_ref_target_id'));
      $query->fields('m', array('uid'));
      $query->condition('u.bundle','follow_user_notify','=');
      $query->condition('u.field_user_ref_target_id',$account->uid,'=');
      $query->condition('m.uid',$content_id,'=');

      $result = $query->execute();
      if ($result->rowCount() > 0) {
        // Follow: User Notify message has been previously created and sent
        // To prevent spam, do not create/send more. Break statement now.
        break;
      }

      // Set message entity
      $message = message_create('follow_user_notify', array('uid' => $content_id));
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_user_ref->set($account);
      $wrapper->field_flag_ref->set($flagging);

      // Send message using Message Notify
      message_notify_send_message($message, array(), $notifier_name);

      break;
  }
}

/**
 * Implements hook_node_update().
 * - Trigger Node Update Notify message
 */
function gie_messages_node_update($node) {

  $query = db_select('flagging', 'f');
  $query->fields('f');
  $query->condition('entity_id',$node->nid,'=');
  $query->condition('fid','1','=');

  $result = $query->execute();

  foreach($result as $record) {

    $uid = $record->uid;
    if ($uid == $node->uid) {
      // If user is node author, skip to next user
      continue;
    }

    // Get notifier name based on user
    $notifier_name = _gie_messages_get_notifier_name($uid);
    if ($notifier_name == 'do_not_send') {
      // user set to not receive emails, skip to next user
      continue;
    }

    // Get specific node update notifications from past 24 hours to user
    $q = db_select('message', 'm');
    $q->join('field_data_field_node_ref','n','m.mid=n.entity_id');
    $q->fields('m',array('mid','type','uid','timestamp'));
    $q->fields('n',array('field_node_ref_target_id'));
    $q->condition('m.type','node_update_notify','=');
    $q->condition('m.uid',$uid,'=');
    $q->condition('n.field_node_ref_target_id',$node->nid,'=');
    $q->condition('m.timestamp',(time() - 86400),'>'); // 86400 = 1 day

    $r = $q->execute();
    if($r->rowCount() > 0) {
      // If messages found, skip to next user
      // Limits node update notifications to once every 24 hours
      continue;
    }

    // Set message entity
    $message = message_create('node_update_notify', array('uid' => $uid));
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_node_ref->set($node);

    // Send message using Message Notify
    message_notify_send_message($message, array(), $notifier_name);
  }
}

/**
 * Helper function to get notifier name
 * @param $uid
 *   User ID
 * @return string
 *   Notifier Name
 */
function _gie_messages_get_notifier_name($uid) {
  // Get User Notifications frequency field
  $user = entity_metadata_wrapper('user', $uid);
  $notification = $user->field_user_notifications->value();

  // Get notifier based on email message frequency of user
  switch($notification) {
    case 'daily':
      $notifier_name = 'digest_day';
      break;
    case 'weekly':
      $notifier_name = 'digest_week';
      break;
    case 'no_email':
      $notifier_name = 'do_not_send';
      break;
    default:
      $notifier_name = 'email'; //send immediately
  }

  return $notifier_name;
}
