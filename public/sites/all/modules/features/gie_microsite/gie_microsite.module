<?php
/**
 * @file
 * Code for the GIE Microsite feature.
 */

include_once 'gie_microsite.features.inc';


/**
 * Implements hook_menu_alter().
 */
function gie_microsite_menu_alter(&$items) {
  $items['taxonomy/term/%taxonomy_term']['access callback'] = 'gie_microsite_access_callback';
  $items['taxonomy/term/%taxonomy_term']['access arguments'] = array(2, 'access content');
  $items['taxonomy/term/%taxonomy_term']['page arguments'] = array(2);

  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add']['access callback'] = 'gie_microsite_admin_add_access_callback';
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add']['access arguments'] = array(3, 'administer taxonomy');
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add']['page arguments'] = array('taxonomy_form_term', array(), 3);

  $items['taxonomy/term/%taxonomy_term/edit']['access callback'] = 'gie_microsite_admin_edit_access_callback';
  $items['taxonomy/term/%taxonomy_term/edit']['access arguments'] = array(2, 'administer taxonomy');
  $items['taxonomy/term/%taxonomy_term/edit']['page arguments'] = array('taxonomy_form_term', 2, NULL);

}

function gie_microsite_access_callback($term, $permission) {
  if (!user_access($permission)) {
    return FALSE;
  }

  $domain = $GLOBALS['_domain'];

  if (!empty($term) && $term->vocabulary_machine_name == 'youthpower_issues') {
    if (!empty($domain) && $domain['domain_id'] == 7) {
      return TRUE;
    }
    return FALSE;
  }
  return TRUE;

}

function gie_microsite_admin_add_access_callback($vocabulary, $permission) {
  if (!user_access($permission)) {
    return FALSE;
  }

  $domain = $GLOBALS['_domain'];

  if (!empty($vocabulary) && $vocabulary->machine_name == 'youthpower_issues') {
    if (!empty($domain) && $domain['domain_id'] == 7) {
      return TRUE;
    }
    return FALSE;
  }
  return TRUE;

}

function gie_microsite_admin_edit_access_callback($term, $permission) {
  if (!user_access($permission)) {
    return FALSE;
  }

  $domain = $GLOBALS['_domain'];

  if (!empty($term) && $term->vocabulary_machine_name == 'youthpower_issues') {
    if (!empty($domain) && $domain['domain_id'] == 7) {
      return TRUE;
    }
    return FALSE;
  }
  return TRUE;

}

/**
 * Implements hook_form_alter().
 * - Change the contact form category to appropriate domain
 */
function gie_microsite_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'contact_site_form') {
    // get current domain
    $domain = $GLOBALS['_domain'];

    // get the category ID corresponding to the current domain
    $cid = array_search($domain['sitename'],$form['cid']['#options']);

    // change the default category to the found category id
    if ($cid) {
      $form['cid']['#default_value'] = $cid;
    }

    // hide the Category drop-down field
    $form['cid']['#access'] = FALSE;

    // add custom submit to alter from field
    array_unshift($form['#submit'], '_gie_microsite_contact_submit_alter');
  }
}

/**
 * Change from field to sitewide contact to site email. Add user info to body
 */
function _gie_microsite_contact_submit_alter($form, &$form_state) {
  // add the user mail to the message body
  $user_mail = $form_state['values']['mail'];
  $user_info_text = t('Reply to @user_mail.', array('@user_mail' => $user_mail));
  $form_state['values']['message'] .= PHP_EOL.PHP_EOL . $user_info_text;

  // change from (mail) field to sitewide variables
  $form_state['values']['mail'] = variable_get('site_mail', 'info@globalinnovationexchange.org');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gie_microsite_form_menu_edit_menu_alter(&$form, &$form_state) {
  $menus = variable_get('gie_microsite_domain_menu_filter', array('menu-microsite-menu' => ''));
  $form['gie_microsite_domain_menu_filter'] = array(
    '#type' => 'checkbox',
    '#title' => t('Should the menu only show links for the specific domain you are on at the moment?'),
    '#default_value' => isset($menus[$form['old_name']['#value']]),
  );
}

/**
 * Add or remove a menu from the menu_block_menu_order variable.
 *
 * @param string $menu_name
 *   A menu machine name.
 * @param mixed $status
 *   If $status evaluates to TRUE, the menu will be added. If $status evaluates
 *   to FALSE, the menu will be removed.
 */
function gie_microsite_domain_menu_filter_set_menu($menu_name, $status) {
  $menus = variable_get('gie_microsite_domain_menu_filter', array('menu-microsite-menu'));
  if ($status && !isset($menus[$menu_name])) {
    array_push($menus, $menu_name);
    variable_set('gie_microsite_domain_menu_filter', $menus);
  }
  elseif (!$status && isset($menus[$menu_name])) {
    unset($menus[$menu_name]);
    variable_set('gie_microsite_domain_menu_filter', $menus);
  }
}

/**
 * Implements hook_menu_insert().
 */
function gie_microsite_menu_insert($menu) {
  if (!empty($menu['gie_microsite_domain_menu_filter'])) {
    gie_microsite_domain_menu_filter_set_menu($menu['menu_name'], TRUE);
  }
}

/**
 * Implements hook_menu_update().
 */
function gie_microsite_menu_update($menu) {
  if (isset($menu['gie_microsite_domain_menu_filter'])) {
    gie_microsite_domain_menu_filter_set_menu($menu['menu_name'], $menu['gie_microsite_domain_menu_filter']);
  }
}

/**
 * Implements hook_menu_delete().
 */
function gie_microsite_menu_delete($menu) {
  // Delete menu block variables.
  foreach (variable_get('menu_block_ids', array()) as $delta) {
    $config = menu_block_get_config($delta);
    if ($config['menu_name'] === $menu['menu_name']) {
      menu_block_delete($delta);
    }
  }

  gie_microsite_domain_menu_filter_set_menu($menu['menu_name'], FALSE);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function gie_microsite_form_menu_overview_form_alter(&$form, &$form_state, $form_id) {
  // Get the current domain
  global $_domain;

  // If we can't determine the domain we are on, don't hide anything
  if (empty($_domain)) {
    return;
  }

  // Grab menus that will be domain filtered on
  $menus = variable_get('gie_microsite_domain_menu_filter');

  if (in_array($form['#menu']['menu_name'], $menus)) {
    foreach ($form as $key => $menu_item) {
      if (strpos($key, 'mlid') > -1) {
        if (!empty($menu_item['#item'])) {
          if (!empty($menu_item['#item']['options']) && !empty($menu_item['#item']['options']['domain_menu_access']) && !empty($menu_item['#item']['options']['domain_menu_access']['show'])) {
            $domain_menu_access = $menu_item['#item']['options']['domain_menu_access']['show'];
            if (!empty($domain_menu_access) && !in_array('d' . $_domain['domain_id'], $domain_menu_access)) {
              unset($form[$key]);
            }
          } else {
            unset($form[$key]);
          }
        }
      }
    }

  }
}