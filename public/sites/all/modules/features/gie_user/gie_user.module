<?php
/**
 * @file
 * Code for the GIE Profile feature.
 */

include_once 'gie_user.features.inc';

/**
 * Implements hook_ds_fields_info().
 * - Create Full Name display field.
 * - Create Member Since display field.
 * - Create Contact (email) field.
 */
function gie_user_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'user') {
    $fields['user_full_name'] = array(
      'title' => t('Full Name'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('user|*'),
      'function' => '_gie_user_user_full_name',
      'properties' => array(
        'formatters' => array(
          'linked_name' => 'Linked',
          'plain_text_name' => 'Plain text',
        ),
      ),
    );

    $fields['user_member_since'] = array(
      'title' => t('Member since'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('user|*'),
      'function' => '_gie_user_user_member_since',
    );

    $fields['user_email'] = array(
      'title' => t('Contact'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('user|*'),
      'function' => '_gie_user_user_email',
    );

    return array($entity_type => $fields);
  }

  return;
}

/**
 * Render function for Full Name field.
 */
function _gie_user_user_full_name($field) {
  // set formatter variable
  $formatter = $field['formatter'];

  // wrap user entity, set first / last name
  $wrapper = entity_metadata_wrapper('user', $field['entity']);
  $first_name = $wrapper->field_user_firstname->value();
  $last_name = $wrapper->field_user_lastname->value();

  // Initialize output
  $output = '';

  // Check formatter
  if ($formatter == 'linked_name') {
    $uid = $wrapper->uid->value();

    // set name text
    if (!empty($first_name) && !empty($last_name)) {
      $full_name = $first_name . ' ' . $last_name;
    } else {
      $full_name = $wrapper->name->value();
    }

    // Render name linked to the user's profile
    $output = l($full_name, 'user/' . $uid);
  } elseif ($formatter == 'plain_text_name') {
    $full_name = $first_name . ' ' . $last_name;

    // Render plain text name
    $output = check_plain($full_name);
  }

  return $output;
}

/**
 * Render function for Member since field.
 */
function _gie_user_user_member_since($field) {
  // Get and format Account creation date
  $wrapper = entity_metadata_wrapper('user', $field['entity']);
  $created = $wrapper->created->value();
  $formatted = date('M j, Y', $created);

  return 'Member since ' . $formatted;
}

/**
 * Render function for Contact (email) field
 */
function _gie_user_user_email($field) {
  $account = $field['entity'];
  $uid = $account->uid;

  global $user;
  // do not show on own user page OR if the requested user has disabled their contact form OR permission check
  if ($user->uid == $uid || empty($account->data['contact']) || !user_access('access user contact forms')) {
    return null;
  };

  // Setup link for display
  $link = l(t('Contact'), 'user/' . $uid . '/contact', array(
    'attributes' => array(
      'class' => array('button')
    ),
  ));

  return $link;
}

/**
 * Implements hook_field_formatter_info().
 * - Create formatter for 'City, State, Country'
 */
function gie_user_field_formatter_info() {
  return array(
    'city_state_country' => array(
      'label' => t('City, State, Country'),
      'field types' => array('addressfield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 * - Display for 'City, State, Country' formatter
 */
function gie_user_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'city_state_country') {
    foreach ($items as $delta => $item) {
      // Initialize empty address array
      $address_parts = array();

      // Set city/locality
      if (!empty($item['locality'])) {
        $address_parts[] = $item['locality'];
      }

      // Set state/administrative area
      if (!empty($item['administrative_area'])) {
        $address_parts[] = $item['administrative_area'];
      }

      // Set country
      if (!empty($item['country'])) {
        $country_iso = $item['country'];

        // Get list of countries
        $countries = _addressfield_country_options_list();

        // Get full name of country based on country code
        $country = $countries[$country_iso];
        $address_parts[] = $country;
      }

      // Set comma separated output of address items
      $inline_address = implode(', ', $address_parts);

      // Output for field: City, State, Country
      $element[$delta] = array('#markup' => $inline_address);
    }
  }

  return $element;
}

/**
 * Implements hook_views_query_alter().
 * - Sort 'Recently posted' view by combined date.
 */
Function gie_user_views_query_alter(&$view, &$query) {
  if ($view->name == 'recently_posted' && $view->current_display == 'recently_posted') {
    // Add the fields we need
    $fields = array(
      'field_data_field_resource_date' => 'field_resource_date_value',
      'node' => 'created',
    );
    foreach ($fields as $table => $field) {
      $query->add_field($table, $field);
    }

    // Add our custom ORDER BY CASE. Note that we convert all the datefields to timestamps.
    $query->orderby = array(
      array(
        'field' => 'CASE
          WHEN field_data_field_resource_date.field_resource_date_value THEN unix_timestamp(field_data_field_resource_date.field_resource_date_value)
          ELSE node.created END',
        'direction' => 'DESC',
      )
    );
  }
}

/**
 * Implements hook_views_pre_render().
 */
function gie_user_views_pre_render(&$view) {
  // Add 'Create your account' link to user menu view for anonymous users.
  if ($view->name == 'communities_user_menu' && user_is_anonymous()) {
    $view->footer['area']->options['content'] .= '<a class="add-new" href="/user/register">Create Your Account</a>';
  }
}

/**
 * Implements hook_menu_alter().
 * - Remove Contact item from Tab menu.
 */
function gie_user_menu_alter(&$items) {
  $items['user/%user/contact']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gie_user_form_user_profile_form_alter(&$form) {
  // Hide "Select the types of assistance..." field
  $form['field_assistance_offered']['#access'] = FALSE;

  // Add custom submit to redirect user to profile
  $form['actions']['submit']['#submit'][] = 'gie_user_profile_redirect';
}

/**
 * Custom Submission for sending the user back to their profile page after user edit
 */
function gie_user_profile_redirect($form, &$form_state) {
  global $user;
  $alias = drupal_get_path_alias('user/' . $user->uid);
  if (!empty($alias)) {
    $form_state['redirect'] = $alias;
  } else {
    $form_state['redirect'] = 'user/' . $user->uid;
  }

}

/**
 * Implements hook_mail_alter().
 * - alter From field on User Personal Contact mail to site email.
 */
function gie_user_mail_alter(&$message) {
  //Alter only the User Personal Contact messages
  if ($message['id'] === 'contact_user_mail') {
    //get user and site emails
    $user_email = $message['params']['sender']->mail;
    $site_email = variable_get('site_mail', '');
    //add additional text to email body
    $message['body'][] = t('This email was sent from '.$user_email.'. Please reply to this user directly.');
    //set appropriate fields to site email
    $message['from'] = $site_email;
    $message['headers']['From'] = $site_email;
    $message['params']['mail'] = $site_email;
  }
}

/*
 * Implements hook_ctools_plugin_directory()
 */
/**
 * @param $owner
 * @param $plugin_type
 * @return string
 */
function gie_user_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_field_attach_validate().
 */
function gie_user_field_attach_validate($entity_type, $entity, &$errors) {
  $valid_types = array('user', 'organization');

  if (in_array($entity_type, $valid_types)) {

    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    if (!empty($wrapper->field_user_twitter->value())) {
      if (!gie_user_social_field_validate('field_user_twitter', $wrapper->field_user_twitter->value())) {
        $lang = field_language($entity_type, $entity, 'field_user_twitter', NULL);
        $errors['field_user_twitter'][$lang][0][] = array(
          'error' => 'field_user_twitter_invalid',
          'message' => t('Twitter url must be set correctly. Example: https://twitter.com/RobertDowneyJr'),
        );
      }
    }
    if (!empty($wrapper->field_user_linkedin->value())) {
      if (!gie_user_social_field_validate('field_user_linkedin', $wrapper->field_user_linkedin->value())) {
        $lang = field_language($entity_type, $entity, 'field_user_linkedin', NULL);
        $errors['field_user_linkedin'][$lang][0][] = array(
          'error' => 'field_user_linkedin_invalid',
          'message' => t('Linkedin url must be set correctly. Example: https://www.linkedin.com/in/robertdowneyjunior'),
        );
      }
    }
    if (!empty($wrapper->field_user_facebook->value())) {
      if (!gie_user_social_field_validate('field_user_facebook', $wrapper->field_user_facebook->value())) {
        $lang = field_language($entity_type, $entity, 'field_user_facebook', NULL);
        $errors['field_user_facebook'][$lang][0][] = array(
          'error' => 'field_user_facebook_invalid',
          'message' => t('Facebook url must be set correctly. Example: https://www.facebook.com/robertdowneyjr'),
        );
      }
    }
  }
}


/**
 *
 * Regex Validation for Social Media Fields
 */
function gie_user_social_field_validate($field_name, $field_value) {
  if (!empty($field_name) && !empty($field_value)) {
    mb_regex_encoding('UTF-8');

    switch ($field_name) {
      case 'field_user_twitter':
        $regex = '^.*twitter\\.com.*';
        break;
      case 'field_user_linkedin':
        $regex = '^.*linkedin\\.com.*';
        break;
      case 'field_user_facebook':
        $regex = '^.*facebook\\.com.*';
        break;
      default:
        $regex = '';
        break;
    }

    if (!empty($regex)) {
      if ($field_value != '' && (!mb_ereg("$regex", $field_value))) {
        return FALSE;
      }
      else {
        return TRUE;
      }
    }
  }
}