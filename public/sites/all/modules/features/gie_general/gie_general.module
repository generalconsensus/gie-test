<?php
/**
 * @file
 * Code for the GIE General feature.
 */

include_once 'gie_general.features.inc';

/**
 * Implements hook_menu_alter().
 * - Alter title of 'User Account' link.
 * - Alter Dashboard so only logged in users see link. 
 */
function gie_general_menu_alter(&$items) {
  $items['user']['title callback'] = '_gie_general_welcome';
  $items['dashboard']['access callback'] = 'user_is_logged_in';
  $items['taxonomy/term/%taxonomy_term/feed']['access arguments'] = FALSE;
}

/**
 * Callback to generate dynamic Welcome text.
 */
function _gie_general_welcome() {
  if (user_is_logged_in()) {
    $user = entity_metadata_wrapper('user', $GLOBALS['user']);
    $first_name = $user->field_user_firstname->value();

    // Temporary if statement to place filled in name
    // TODO: remove this statement if first name becomes required
    if (!empty($first_name)) {
      $name = $first_name;
    } else {
      $name = $user->name->value();
    }
    return t('Welcome, ') . $name . '!';
  } else {
    return t('User account');
  }
}

/**
 * Implements hook_block_info().
 */
function gie_general_block_info() {
  $blocks = array();

  $blocks['about_submenu'] = array(
    'info' => t('GIE About submenu'),
  );
  $blocks['innovation_submenu'] = array(
    'info' => t('GIE Innovation submenu'),
  );
  $blocks['resource_submenu'] = array(
    'info' => t('GIE Resource submenu'),
  );
  $blocks['funding_submenu'] = array(
    'info' => t('GIE Funding submenu'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function gie_general_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'about_submenu':
      $block['subject'] = '';
      $block['content'] = _gie_general_contents($delta);
      break;
    case 'innovation_submenu':
      $block['subject'] = '';
      $block['content'] = _gie_general_contents($delta);
      break;
    case 'resource_submenu':
      $block['subject'] = '';
      $block['content'] = _gie_general_contents($delta);
      break;
    case 'funding_submenu':
      $block['subject'] = '';
      $block['content'] = _gie_general_contents($delta);
      break;
  }

  return $block;
}

/**
 * Returns block content.
 * - Innovation Submenu links
 */
function _gie_general_contents($block_id) {
  $block = array();

  switch($block_id) {
    case 'about_submenu':
      $block = array(
        'about_page' => array(
          '#type' => 'link',
          '#title' => t('About the Exchange'),
          '#href' => 'about-exchange',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-about'),
          ),
        ),
      );
      $block += array(
        'faq_page' => array(
          '#type' => 'link',
          '#title' => t('FAQs'),
          '#href' => 'frequently-asked-questions',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-questions'),
          ),
        ),
      );
      $block += array(
        'partners_page' => array(
          '#type' => 'link',
          '#title' => t('Exchange Partners'),
          '#href' => 'partners',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-partners'),
          ),
        ),
      );
      $block += array(
        'become_page' => array(
          '#type' => 'link',
          '#title' => t('Become a Partner'),
          '#href' => 'node/174',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-become'),
          ),
        ),
      );
      break;
    case 'innovation_submenu':
      $block = array(
        'browse_all' => array(
          '#type' => 'link',
          '#title' => t('Browse all innovations'),
          '#href' => 'innovations',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-innovation'),
          ),
        ),
      );
      $block += array(
        'add_innovation' => array(
          '#type' => 'link',
          '#title' => t('Add an innovation'),
          '#href' => 'node/add/innovation',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-add'),
          ),
        ),
      );
      $block += array(
        'find_innovations' => array(
          '#type' => 'link',
          '#title' => t('Find other innovators'),
          '#href' => 'members/field_user_type/29',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-innovator'),
          ),
        ),
      );
      break;
    case 'resource_submenu':
      $block = array(
        'browse_all' => array(
          '#type' => 'link',
          '#title' => t('Browse resources'),
          '#href' => 'resources',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-resources'),
          ),
        ),
      );
      $block += array(
        'add_resource' => array(
          '#type' => 'link',
          '#title' => t('Add new resource'),
          '#href' => 'node/add/resource',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-add'),
          ),
        ),
      );
      break;
    case 'funding_submenu':
      $block = array(
        'browse_all' => array(
          '#type' => 'link',
          '#title' => t('Browse funding ops'),
          '#href' => 'funding',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-funding'),
          ),
        ),
      );
      $block += array(
        'add_funding' => array(
          '#type' => 'link',
          '#title' => t('Add new funding op'),
          '#href' => 'node/add/funding',
          '#attributes' => array(
            'class' => array('tb-megamenu-big-button has-icon-add'),
          ),
        ),
      );
      break;
  }

  return $block;
}

/**
 * Callback to change the theme for nodes.
 */
function _gie_general_node_theme($node){
  global $theme;
  switch ($node->type) {
    // Change theme for long form pages
    case 'long_form_page':
      return 'gesso_longform';
    default:
      return $theme;
  }
}
/*
 * Implements hook_cron fixing slow cache clears
 */
function gie_general_cron() {
  global $user;
  global $base_url;

  $cid = 'admin_menu:';
  if (isset($user->uid)) {
    $cid .= $user->uid;
  }

  // Clear the cache for the admin menu.
  cache_clear_all(isset($user->uid) ? $cid : '*', 'cache_admin_menu', TRUE);

  // A HTTP request will rebuild the menu.
  drupal_http_request($base_url);
}