<?php
/**
 * @file
 * Code for the GIE Dashboard feature.
 */

include_once 'gie_dashboard.features.inc';


/*
 * Implements hook_ctools_plugin_directory()
 */
function gie_dashboard_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 *
 * Adds multiple IDs for MLT call
 */
function gie_dashboard_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  $id = search_api_solr_site_hash();
  $nids =  &drupal_static('_mlt_nids');
  $node_index = 'id:"' . $id . '-default_node_index-' . $nids[0] . '"';

  // Make sure it's the query we want, could also check reference of query
  if ($node_index == $call_args['query']) {
    $index = 1;
    $count = count($nids);

    $call_args['query'] = 'id:(';
    foreach ($nids as $nid) {
      $call_args['query'] .= '"' . $id . '-default_node_index-' . $nid . '"';
      if ($index < $count) {
        $call_args['query'] .= ' OR ';
      }
      $index++;
    }
    $call_args['query'] .= ')';
  }
}


//What's New?
/**
 * @param null $since
 */
function gie_dashboard_exchange_updates_form($form, &$form_state) {

  global $user;
  if (!empty($_GET['updates']) && $_GET['updates'] == 'last-visit' && !empty($user) && $user->uid > 0) {
    // Customize the data for showing everything since the last login

    $now = strtotime('now');
    $last_access = db_query("select login from {users} where uid = :uid", array(':uid' => $user->uid))->fetchField();
    $organizations = db_query("SELECT COUNT(nid) from {node} WHERE type = 'organization' AND changed between :start AND :end", array(
      ':start' => $last_access,
      ':end' => $now
    ))->fetchField();
    $award_available = db_query("SELECT sum(field_funding_grant_award_value_value) from {field_data_field_funding_grant_award_value} inner join node on node.nid = field_data_field_funding_grant_award_value.entity_id where changed between :start AND :end", array(
      ':start' => $last_access,
      ':end' => $now
    ))->fetchField();
    $collaborators = db_query("SELECT COUNT(uid) from {users} WHERE created between :start AND :end", array(
      ':start' => $last_access,
      ':end' => $now
    ))->fetchField();
    $innovations = db_query("SELECT COUNT(nid) from {node} where type = 'innovation' AND changed between :start AND :end", array(
      ':start' => $last_access,
      ':end' => $now
    ))->fetchField();
  }
  else {
    $first_day_last_month = strtotime('first day of last month');
    $last_day_last_month = strtotime('last day of last month');
    // Customize the data for showing everything since last month
    $organizations = db_query("SELECT COUNT(nid) from {node} WHERE type = 'organization' AND changed between :start AND :end", array(
      ':start' => $first_day_last_month,
      ':end' => $last_day_last_month
    ))->fetchField();
    $award_available = db_query("SELECT sum(field_funding_grant_award_value_value) from {field_data_field_funding_grant_award_value} inner join node on node.nid = field_data_field_funding_grant_award_value.entity_id where changed between :start AND :end", array(
      ':start' => $first_day_last_month,
      ':end' => $last_day_last_month
    ))->fetchField();
    $collaborators = db_query("SELECT COUNT(uid) from {users} WHERE created between :start AND :end", array(
      ':start' => $first_day_last_month,
      ':end' => $last_day_last_month
    ))->fetchField();
    $innovations = db_query("SELECT COUNT(nid) from {node} where type = 'innovations' AND changed between :start AND :end", array(
      ':start' => $first_day_last_month,
      ':end' => $last_day_last_month
    ))->fetchField();


  }
  if (!empty($award_available)) {
    if ($award_available > 1000000000) {
      $award_available = round(($award_available / 1000000000), 1) . 'B';
    }
    else {
      if ($award_available > 1000000) {
        $award_available = round(($award_available / 1000000), 1) . 'M';
      }
      else {
        if ($award_available > 1000) {
          $award_available = round(($award_available / 1000), 1) . 'T';
        }
      }
    }
    $award_available = '<div class="data-point"><a href="/funding">$' . $award_available . ' <span>Available</span></a></div>';
  }
  else {
    $award_available = '<div class="data-point"><a href="/funding">N/A <span>Available</span></a></div>';
  }

  $organizations = !empty($organizations) ? '<div class="data-point"><a href="/organizations">' . $organizations . ' <span>Organizations</span></a></div>' : '<div class="data-point"><a href="/organizations">N/A <span>Organizations</span></a></div>';
  $collaborators = !empty($collaborators) ? '<div class="data-point"><a href="/members">' . $collaborators . ' <span>Collaborators</span></a></div>' : '<div class="data-point"><a href="/members">N/A <span>Collaborators</span></a></div>';
  $innovations = !empty($organizations) ? '<div class="data-point"><a href="/innovations">' . $innovations . ' <span>Innovations</span></a></div>' : '<div class="data-point"><a href="/innovations">N/A <span>Innovations</span></a></div>';


  $form['selected'] = array(
    '#type' => 'select',
    '#prefix' => '<div class="dashboard-revamp-title dashboard_updates_selected">' . t("Exchange Updates since last") . '</div>',
    '#options' => array(
      0 => t('Month'),
      1 => t('Your Last Visit'),
    ),
    '#default_value' => !empty($_GET['updates']) && $_GET['updates'] == 'last-visit' ? 1 : 0,
    '#attributes' => array('onChange' => 'document.getElementById("gie-dashboard-exchange-updates-form").submit();'),
    '#suffix' => '<hr>',
    '#weight' => 4,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => '',
    '#prefix' => '<div style="display: none;">',
    '#suffix' => '</div>',
    '#weight' => 0,
  );

  $form['updates'] = array(
    '#type' => 'item',
    '#markup' => $organizations . $award_available . $collaborators . $innovations,
    '#weight' => 5,
    '#suffix' => '<div style="text-align:center"><a class="button button--highlight dashboard--exchange--out" href="/data">See all Exchange Data</a></div>'
  );


  return $form;
}


/**
 * @param $form
 * @param $form_state
 */
function gie_dashboard_exchange_updates_form_validate($form, &$form_state) {
  if (empty($form_state['values']['selected']) && !is_numeric($form_state['values']['selected'])) {
    form_set_error('selected', 'Select a normal value');
  }
}

/**
 * @param $form
 * @param $form_state
 */
function gie_dashboard_exchange_updates_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['selected']) && $form_state['values']['selected'] == 1) {

    $form_state['redirect'] = array(
      'dashboard/',
      array(
        'query' => array(
          'updates' => 'last-visit',
        ),
      ),
    );
    drupal_redirect_form($form_state);
  }
  else {
    $form_state['redirect'] = array(
      'dashboard/',
      array(
        'query' => array(
          'updates' => 'month',
        ),
      ),
    );
    drupal_redirect_form($form_state);
  }
}


/**
 * TODO: Combine Queries to reduce time for creation
 */
function gie_dashboard_notification_center_list() {
  global $user;
  if (!empty($user) && $user->uid > 0) {
    $results = array();
    $follow_user = flag_load('follow');
    $favorite = flag_load('favorite');

    //  Comments left on your content
    $results['comments_on_your_content'] = db_query('SELECT users.name, users.uid, field_data_field_user_firstname.field_user_firstname_value, field_data_field_user_lastname.field_user_lastname_value
	FROM node
    INNER JOIN comment on comment.nid = node.nid
    INNER JOIN users on comment.uid = users.uid
    LEFT JOIN field_data_field_user_firstname on field_data_field_user_firstname.entity_id = comment.uid
    LEFT JOIN field_data_field_user_lastname on field_data_field_user_lastname.entity_id = comment.uid
    WHERE node.uid = :uid GROUP BY users.uid ORDER BY RAND() LIMIT 3', array(
      ':uid' => $user->uid
    ))->fetchAll();


    // Users following you
    $results['people_follow_you'] = db_query('SELECT users.name, users.uid, field_data_field_user_firstname.field_user_firstname_value, field_data_field_user_lastname.field_user_lastname_value
    FROM flagging
    INNER JOIN users on flagging.uid = users.uid
    LEFT JOIN field_data_field_user_firstname on field_data_field_user_firstname.entity_id = flagging.uid
    LEFT JOIN field_data_field_user_lastname on field_data_field_user_lastname.entity_id = flagging.uid
    WHERE flagging.fid = :fid AND flagging.entity_id = :uid AND flagging.uid <> :uid ORDER BY RAND() LIMIT 3', array(
      ':fid' => $follow_user->fid,
      ':uid' => $user->uid
    ))->fetchAll();

    // Users following your content
    $results['people_follow_your_content'] = db_query('SELECT users.name, users.uid, field_data_field_user_firstname.field_user_firstname_value, field_data_field_user_lastname.field_user_lastname_value
    FROM node
    INNER JOIN flagging on flagging.entity_id = node.nid
    INNER JOIN users on flagging.uid = users.uid
    LEFT JOIN field_data_field_user_firstname on field_data_field_user_firstname.entity_id = flagging.uid
    LEFT JOIN field_data_field_user_lastname on field_data_field_user_lastname.entity_id = flagging.uid
    WHERE flagging.fid = :fid AND node.uid = :uid AND flagging.uid <> :uid ORDER BY RAND() LIMIT 3', array(
      ':fid' => $favorite->fid,
      ':uid' => $user->uid
    ))->fetchAll();


    // Grab random followers for use with generating a list of content
    // Inner Join back on flagging to make sure that the relationship is 'two-way'
    $followers = db_query('SELECT flagging.uid FROM flagging INNER JOIN flagging reverse_flagging on flagging.uid = reverse_flagging.entity_id
    WHERE flagging.fid = :fid AND reverse_flagging.fid  = :fid
    AND flagging.entity_id = :uid AND reverse_flagging.uid = :uid', array(
      ':fid' => $follow_user->fid,
      ':uid' => $user->uid
    ))->fetchCol();

    if (!empty($followers) && $followers > 0) {
      $now = strtotime('now');

      //  A "friend" created new content
      $results['friend_content'] = db_query('SELECT node.title, node.nid, users.name, users.uid
  FROM node
  INNER JOIN users on users.uid = node.uid
  WHERE node.uid IN (:uids) AND node.changed between :start AND :end
  ORDER BY RAND() LIMIT 1', array(
        ':uids' => $followers,
        ':start' => strtotime('first day of last month'),
        ':end' => $now
      ))->fetchAssoc();

      //  A "friend" followed a piece of content
      $results['friend_followed_content'] = db_query('SELECT users.name, users.uid, followed_content.title, followed_content.nid
  FROM flagging
  INNER JOIN users on users.uid = flagging.uid
  INNER JOIN node followed_content on followed_content.nid = flagging.entity_id AND flagging.timestamp between :start AND :end
  WHERE flagging.uid IN (:uids) ORDER BY RAND() LIMIT 3', array(
        ':start' => strtotime('first day of last month'),
        ':end' => $now,
        ':uids' => $followers
      ))->fetchAssoc();

      //  A "friend" connected with a user
      $results['friend_followed'] = db_query('SELECT users.name as original_friend_name, users.uid as original_friend_uid, friend_of_friend.uid as friend_of_friend_uid, friend_of_friend.name as friend_of_friend_name
  FROM flagging
  INNER JOIN users on users.uid = flagging.uid
  INNER JOIN flagging connected_user on connected_user.uid = flagging.entity_id AND flagging.timestamp between :start AND :end
  INNER JOIN users friend_of_friend on friend_of_friend.uid = connected_user.uid
  WHERE flagging.uid IN (:uids) AND flagging.fid = :fid AND connected_user.entity_id <> :uid AND connected_user.fid = :fid ORDER BY RAND() LIMIT 3', array(
        ':start' => strtotime('first day of last month'),
        ':end' => $now,
        ':uids' => $followers,
        ':fid' => $follow_user->fid,
        ':uid' => $user->uid
      ))->fetchAssoc();


      //  A "friend" commented on content
      $results['friend_comment'] = db_query('  SELECT users.name, users.uid, node.title, node.nid, friend_comment.subject
  FROM users
  INNER JOIN comment friend_comment on friend_comment.uid = users.uid AND friend_comment.changed between :start AND :end
  INNER JOIN node on node.nid = friend_comment.nid
  WHERE users.uid IN (:uids)
  ORDER BY RAND() LIMIT 3', array(
        ':uids' => $followers,
        ':start' => strtotime('first day of last month'),
        ':end' => $now
      ))->fetchAssoc();
    }
    else {
      $results = array_merge($results, array(
        'friend_content' => 0,
        'friend_followed_content' => 0,
        'friend_followed' => 0,
        'friend_comment' => 0
      ));
    }

    $results['featured_innovation'] = db_query('select node.nid from field_data_field_featured_innovation INNER JOIN node on node.nid = field_data_field_featured_innovation.entity_id WHERE field_featured_innovation_value = 1 LIMIT 1')->fetchField();

    if (!empty($results['featured_innovation']) && is_numeric($results['featured_innovation'])) {
      $entity = entity_view('node', array(node_load($results['featured_innovation'])), 'listing');
      if (!empty($entity)) {
        $results['featured_innovation'] = render($entity);
      }
    }

    return $results;
  }

}

///**
// * @param $variables
// */
//function template_preprocess_gie_dashboard_whats_new_notification_center_view(&$variables) {
//  foreach ($variables['results'] as $key => $result) {
//    if ($key == 'comments_on_your_content') {
//      $variables['results'][$key] = $result . ' People have commented on your content.';
//    }
//    if ($key == 'people_follow_your_content') {
//      $variables['results'][$key] = $result . ' People follow your content.';
//    }
//    elseif ($key == 'people_follow_you') {
//      $variables['results'][$key] = $result . ' People follow you.';
//    }
//    elseif ($key == 'friend_content') {
//      $variables['results'][$key] = $result['name'] . ' created new content ' . l($result['title'], 'node/' . $result['nid']) . '.';
//    }
//    elseif ($key == 'friend_followed_content') {
//      $variables['results'][$key] = $result['name'] . ' followed content ' . l($result['title'], 'node/' . $result['nid']) . '.';
//    }
//    elseif ($key == 'friend_followed') {
//      $variables['results'][$key] = $result['original_friend'] . ' followed ' . $result['friend_of_friend'] . '.';
//    }
//    elseif ($key == 'friend_comment') {
//      $variables['results'][$key] = $result['name'] . ' commented ' . $result['subject'] . ' on ' . l($result['title'], 'node/' . $result['nid']) . '.';
//    }
//  }
//}
//
//
///**
// * @return array|string
// * @throws \Exception
// */
//function gie_dashboard_whats_new_notification_center() {
//  $results = gie_dashboard_notification_center_list();
//  if ($results) {
//    $results = theme('gie_dashboard_whats_new_notification_center_view', array('results' => $results));
//    return $results;
//  }
//  else {
//    return 'empty data';
//  }
//}

/**
 *
 * Implements hook_form_FORM_ID_alter().
 */
function gie_dashboard_form_innovation_node_form_alter(&$form, &$form_state) {
  $admin_role = user_role_load_by_name('administrator');
  $community_role = user_role_load_by_name('Program Community Manager');
  if (!(user_has_role($admin_role->rid) || user_has_role($community_role->rid))) {
    $form['field_featured_innovation']['#type'] = 'hidden';
  }
  // Set field visibility based on whether the user is an admin
  $form['#validate'][] = 'gie_dashboard_form_validate';
}


/**va
 * @param $form
 * @param $form_state
 */
function gie_dashboard_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['field_featured_innovation'][LANGUAGE_NONE][0]['value'])) {
    if ($form_state['values']['field_featured_innovation']['und'][0]['value'] == 1) {
      $existing_featured_innovation = db_query('SELECT entity_id FROM field_data_field_featured_innovation WHERE field_featured_innovation_value = 1')->fetchField();
      if (!empty($existing_featured_innovation)) {
        form_set_error('field_featured_innovation', 'Only one Innovation can be featured at a time. Here is the current ' . l('Featured Innovation', 'node/' . $existing_featured_innovation . '/edit'));
      }
    }
  }
}


/**
 * Implements hook_views_pre_views_pre_view().
 */
function gie_dashboard_views_pre_view($view) {
  if ($view->name == 'dashboard' && $view->current_display == 'user_funding_opportunities') {
    _gie_data_viz_init();
  }
}

function gie_dashboard_views_pre_render(&$view) {
  if ($view->name == 'dashboard' && $view->current_display == 'user_funding_opportunities' && !empty($view->result)) {
    foreach ($view->result as $key => $result) {
      if (!empty($result->field_field_funding_deadline[0]['raw']['value']) && !empty($result->field_field_funding_link[0]['raw']['value'])) {
        $deadline = $result->field_field_funding_deadline[0]['raw']['value'];
        $deadline = strtotime($deadline);
        // The deadline has passed
        if (!empty($deadline) && is_numeric($deadline) && strtotime('now') > $deadline) {
          $result->field_field_funding_deadline[0]['rendered']['#markup'] = '<span class="gie-dashboard-funding-op-status">Closed</span>';
          // The deadline is open
        }
        else {
          $result->field_field_funding_deadline[0]['rendered']['#markup'] = '<a class="button button--highlight" href="' . $result->field_field_funding_link[0]['raw']['value'] . '">Apply</a>';
        }
      }
    }
  }
}


/**
 * Implements hook_menu().
 */
function gie_dashboard_menu() {
  $items = array();
  $items['gie_dashboard/notification_center'] = array(
    'title' => 'Test Notification Center Callback',
    'page arguments' => array(2),
    'page callback' => 'gie_dashboard_whats_new_tab',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function gie_dashboard_whats_new_tab() {
  $results = gie_dashboard_notification_center_list();
  $gie_dashboard_notification_center = array();
  $gie_dashboard_featured_innovation = array();


  if ($results) {

    $notification_center_styles = array(
      'dashboard--notification__center__item__grey' => '',
      'dashboard--notification__center__item__featured' => '',
      'dashboard--notification__center__item__pink' => ''
    );

    $gie_dashboard_notification_center = array(
      '#prefix' => '<div class="dashboard-revamp-title">Notification Center<hr></div><div class="dashboard-notification__center__items"><ul>',
      '#suffix' => '</ul></div>',
    );

    foreach ($results as $key => $result) {
      if ($key == 'comments_on_your_content' && !empty($result)) {
        if (count($result) > 1) {
          $comments_name = array();
          $gie_dashboard_notification_center[$key] = array(
            '#markup' => '<li>',
            '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
            '#suffix' => '</div>'
          );
          foreach ($result as $record) {
            $comments_name[] = !empty($record->field_user_firstname_value) && !empty($record->field_user_lastname_value) ? l($record->field_user_firstname_value . ' ' . $record->field_user_lastname_value, 'user/' . $record->uid) : l($record->name, 'user/' . $record->uid);
          }
          $gie_dashboard_notification_center[$key]['#markup'] .= implode(', ', $comments_name) . ' commented on your content</li></br>';


        }
        else {
          $name = !empty($result[0]->field_user_firstname_value) && !empty($result[0]->field_user_lastname_value) ? !$result[0]->field_user_firstname_value . ' ' . $result[0]->field_user_lastname_value : $result[0]->name;
          $gie_dashboard_notification_center[$key] = array(
            '#markup' => '<li>' . l($name, 'user/' . $result[0]->uid) . ' commented on your content</li></br>',
            '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
            '#suffix' => '</div>'
          );

        }
      }
      if ($key == 'people_follow_your_content' && !empty($result)) {
        if (count($result) > 1) {
          $content_name = array();
          $gie_dashboard_notification_center[$key] = array(
            '#markup' => '<li>',
            '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
            '#suffix' => '</div>'
          );
          foreach ($result as $record) {
            $content_name[] = !empty($record->field_user_firstname_value) && !empty($record->field_user_lastname_value) ? l($record->field_user_firstname_value . ' ' . $record->field_user_lastname_value, 'user/' . $record->uid) : l($record->name, 'user/' . $record->uid);
          }
          $gie_dashboard_notification_center[$key]['#markup'] .= implode(', ', $content_name) . ' follows your content</li></br>';

        }
        else {
          $name = !empty($result[0]->field_user_firstname_value) && !empty($result[0]->field_user_lastname_value) ? !$result[0]->field_user_firstname_value . ' ' . $result[0]->field_user_lastname_value : $result[0]->name;
          $gie_dashboard_notification_center[$key] = array(
            '#markup' => '<li>' . l($name, 'user/' . $result[0]->uid) . ' follows your content</li></br>',
            '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
            '#suffix' => '</div>'
          );

        }
      }
      elseif ($key == 'people_follow_you') {
        if (count($result) > 1) {
          $follow_name = array();
          $gie_dashboard_notification_center[$key] = array(
            '#markup' => '<li>',
            '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
            '#suffix' => '</div>'
          );
          foreach ($result as $record) {
            $follow_name[] = !empty($record->field_user_firstname_value) && !empty($record->field_user_lastname_value) ? l($record->field_user_firstname_value . ' ' . $record->field_user_lastname_value, 'user/' . $record->uid) : l($record->name, 'user/' . $record->uid);
          }
          $gie_dashboard_notification_center[$key]['#markup'] .= implode(', ', $follow_name) . ' follow you</li></br>';


        }
        else {
          $name = !empty($result[0]->field_user_firstname_value) && !empty($result[0]->field_user_lastname_value) ? !$result[0]->field_user_firstname_value . ' ' . $result[0]->field_user_lastname_value : $result[0]->name;
          $gie_dashboard_notification_center[$key] = array(
            '#markup' => '<li>' . l($name, 'user/' . $result[0]->uid) . ' follows you</li></br>',
            '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
            '#suffix' => '</div>'
          );

        }
      }
      elseif ($key == 'friend_content' && !empty($result['name']) && !empty($result['uid']) && !empty($result['nid'])) {
        $gie_dashboard_notification_center[$key] = array(
          '#markup' => '<li>' . l($result['name'], 'user/' . $result['uid']) . ' created new content ' . l($result['title'], 'node/' . $result['nid']) . '.</li></br>',
          '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
          '#suffix' => '</div>'
        );
      }
      elseif ($key == 'friend_followed_content' && !empty($result['name']) && !empty($result['uid']) && !empty($result['nid'])) {
        $gie_dashboard_notification_center[$key] = array(
          '#markup' => '<li>' . l($result['name'], 'user/' . $result['uid']) . ' followed content ' . l($result['title'], 'node/' . $result['nid']) . '.</li></br>',
          '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
          '#suffix' => '</div>'
        );
      }
      elseif ($key == 'friend_followed' && !empty($result['original_friend_name']) && !empty($result['original_friend_uid']) && !empty($result['friend_of_friend_name']) && !empty($result['friend_of_friend_uid'])) {

        $gie_dashboard_notification_center[$key] = array(
          '#markup' => '<li>' . l($result['original_friend_name'], 'user/' . $result['original_friend_uid']) . ' followed ' . l($result['friend_of_friend_name'], 'user/' . $result['friend_of_friend_uid']) . '.</li></br>',
          '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
          '#suffix' => '</div>'
        );
      }
      elseif ($key == 'friend_comment' && !empty($result['name']) && !empty($result['uid']) && !empty($result['nid'])) {

        $gie_dashboard_notification_center[$key] = array(
          '#markup' => '<li>' . l($result['name'], 'user/' . $result['uid']) . ' commented ' . $result['subject'] . ' on ' . l($result['title'], 'node/' . $result['nid'], array('fragment' => 'comments')) . '.</li></br>',
          '#prefix' => '<div class="' . array_rand($notification_center_styles) . '">',
          '#suffix' => '</div>'
        );
      }
      elseif ($key == 'featured_innovation') {
        $gie_dashboard_featured_innovation = array(
          '#prefix' => '<div class="dashboard-revamp-title">Innovation Spotlight<hr></div><div class="dashboard-innovation__spotlights__items">',
          '#suffix' => '</div>',
        );

        $gie_dashboard_featured_innovation[$key] = array('#markup' => $result);
      }
    }

  }
  $page = array
  (
    $gie_dashboard_notification_center,
    'form' => drupal_get_form('gie_dashboard_exchange_updates_form'),
    $gie_dashboard_featured_innovation,
  );
  return $page;
}

function gie_dashboard_dummy_data($original_user_uid = NULL, $pieces = NULL) {
  $original_user_uid = !empty($original_user_uid) ? $original_user_uid : 1;
  $pieces = !empty($pieces) ? $pieces : 6;

  // Add the skill match
  if ($original_user_uid != 1) {
    $user = user_load($original_user_uid);
    $user->field_user_interests = array(
      LANGUAGE_NONE => array(
        array(
          'delta' => 0,
          'tid' => '545'
        )
      )
    );
    $user->field_term_sector = array(
      LANGUAGE_NONE => array(
        array(
          'delta' => 0,
          'tid' => '419'
        )
      )
    );
    user_save($user);
  }

  //Pragmatically Create Node Content For Dynamic Exchange Form

  $users = gie_dashboard_create_user($pieces);
  $rand_user = array_rand($users);
  $random_time_last_month = rand(strtotime('first day of last month'), strtotime('last day of last month'));
  // Last Access
  gie_dashboard_create_node('organization', $users[$rand_user], $pieces);
  gie_dashboard_create_node('funding', $original_user_uid, $pieces, array(
    'field_funding_grant_award_value' => 100000,
//    'field_term_topic' => 545,
    'field_term_sector' => 419,
    'field_funding_deadline' => array('value' => date('Y-m-d h:i:s', rand(strtotime('first day of last month'), strtotime('last day of last month')))),
    'field_funding_link' => 'http://google.com'
  ));
  gie_dashboard_create_node('innovation', $users[$rand_user], $pieces);

  $nids = array();
  // Last Month
  $month_users = gie_dashboard_create_user($pieces);
  $org_nids = gie_dashboard_create_node('organization', $users[$rand_user], $pieces);
  $funding_nids = gie_dashboard_create_node('funding', $users[$rand_user], $pieces, array('field_funding_grant_award_value' => 100000));
  $innovation_nids = gie_dashboard_create_node('innovation', $original_user_uid, $pieces);

  $nids = array_merge($org_nids, $funding_nids, $innovation_nids);
  // Random time during last month

  db_update('node')
    ->fields(array(
      'changed' => $random_time_last_month
    ))
    ->condition('nid', array($nids))
    ->execute();

  db_update('users')
    ->fields(array(
      'created' => $random_time_last_month
    ))
    ->condition('uid', array($month_users))
    ->execute();

  // People comment on admin content
  $comment = (object) array(
    'cid' => NULL,
    'nid' => $innovation_nids[array_rand($innovation_nids)],
    'node_type' => 'innovation',
    'pid' => 0,
    'uid' => $users[$rand_user],
    'status' => COMMENT_PUBLISHED,
    'subject' => devel_generate_word(mt_rand(6, 12)),
    'hostname' => ip_address(),
    'language' => LANGUAGE_NONE,
    'comment_body' => array(LANGUAGE_NONE => array(devel_generate_word(mt_rand(6, 12)))),
  );
  comment_save($comment);


  foreach ($users as $key => $user) {
    $account = user_load($user);
    $other_users = array_diff($users, array($user));
    $rando_not_me = $other_users[array_rand($other_users)];

    // People follow admin
    flag('flag', 'follow', $original_user_uid, $account, TRUE);

    // People follow your content
    flag('flag', 'favorite', $innovation_nids[$key], $account, TRUE);

    // Friend creates content
    $generated_content = gie_dashboard_create_node('innovation', $user, 1, array('field_term_topic' => 545));

    // Original User Follows Content
    flag('flag', 'favorite', $generated_content[0], user_load($original_user_uid), TRUE);

    //Friend follows content
    flag('flag', 'favorite', $generated_content[0], user_load($rando_not_me), TRUE);

    //Friend follows Friend of Friend
    flag('flag', 'follow', $user, user_load($rando_not_me), TRUE);

    //Friend comments on content
    $comment = (object) array(
      'cid' => NULL,
      'nid' => $generated_content,
      'node_type' => 'innovation',
      'pid' => 0,
      'uid' => $rando_not_me,
      'status' => COMMENT_PUBLISHED,
      'subject' => devel_generate_word(mt_rand(6, 12)),
      'hostname' => ip_address(),
      'language' => LANGUAGE_NONE,
      'comment_body' => array(LANGUAGE_NONE => array(devel_generate_word(mt_rand(6, 12)))),
    );
    comment_save($comment);
  }
  // Check for a Featured Node
  // If not found, add one
  $featured_node = db_query('SELECT COUNT(entity_id) FROM field_data_field_featured_innovation WHERE field_data_field_featured_innovation.field_featured_innovation_value = 1')->fetchField();
  if (empty($featured_node) || $featured_node < 1) {
    $random_innovation = db_query('SELECT nid FROM node WHERE node.type = :innovation ORDER BY RAND() LIMIT 1', array(':innovation' => 'innovation'))->fetchField();
    $node = node_load($random_innovation);
    $node->field_featured_innovation[$node->language][]['value'] = 1;
    node_save($node);
  }

  watchdog('gie_dashboard', 'Completed Dashboard Data Provision');

}

function gie_dashboard_create_node($type, $uid, $pieces, $payload = NULL) {
  $path = drupal_get_path('module', 'devel_generate');
  require_once($path . '/devel_generate.inc');
  $nodes = array();

  for ($x = 1; $x <= $pieces; $x++) {
    $node = new stdClass();
    $node->title = devel_create_greeking(1, TRUE);
    $node->type = $type;
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->uid = $uid;
    $node->status = 1; //(1 or 0): published or not
    $node->comment = 2; // 0 = comments disabled, 1 = read only, 2 = read/write

    if (!empty($payload['field_funding_grant_award_value'])) {
      $node->field_funding_grant_award_value[$node->language][]['value'] = $payload['field_funding_grant_award_value'];
    }

    if (!empty($payload['field_term_topic'])) {
      $node->field_term_topic[$node->language][]['tid'] = $payload['field_term_topic'];
    }

    if (!empty($payload['field_funding_deadline'])) {
      $node->field_funding_deadline[$node->language][]['value'] = $payload['field_funding_deadline'];
    }

    if (!empty($payload['field_term_sector'])) {
      $node->field_term_sector[$node->language][]['tid'] = $payload['field_term_sector'];
    }

    if (!empty($payload['field_funding_link'])) {
      $node->field_funding_link[$node->language][]['value'] = $payload['field_funding_link'];
    }

    $node = node_submit($node); // Prepare node for saving
    node_save($node);
    $nodes[] = $node->nid;
  }

  return $nodes;
}


function gie_dashboard_create_user($pieces, $name = NULL, $payload = NULL) {
  $path = drupal_get_path('module', 'devel_generate');
  require_once($path . '/devel_generate.inc');
  $users = array();
  if (count($pieces) > 1 && !empty($name)) {
    return;
  }
  for ($x = 1; $x < $pieces; $x++) {
    $user_name = !empty($name) ? $name : devel_generate_word(mt_rand(6, 12));
    //This will generate a random password, you could set your own here
    $password = user_password(8);
    $email = 'test@' . devel_generate_word(mt_rand(6, 12)) . '.com';
    //set up the user fields
    $fields = array(
      'name' => $user_name,
      'mail' => $email,
      'pass' => $password,
      'status' => 1,
      'init' => 'email address',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      ),
    );

    //the first parameter is left blank so a new user is created
    $user = user_save('', $fields);
    $user->field_user_interests = array(
      LANGUAGE_NONE => array(
        array(
          'delta' => 0,
          'tid' => '545'
        )
      )
    );
    $user->field_term_sector = array(
      LANGUAGE_NONE => array(
        array(
          'delta' => 0,
          'tid' => '419'
        )
      )
    );
    user_save($user);
    // If you want to send the welcome email, use the following code

    // Manually set the password so it appears in the e-mail.
    $user->password = $fields['pass'];

    $users[] = $user->uid;
  }
  return $users;
}