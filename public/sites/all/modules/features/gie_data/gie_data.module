<?php
/**
 * @file
 * Code for the GIE Data feature.
 */

include_once 'gie_data.features.inc';


/**
 * Implements hook_ds_fields_info().
 */
function gie_data_ds_fields_info($entity_type) {
    $fields = array();

    if($entity_type == 'node') {
        $fields['data_count'] = array(
            'title' => t('Data Count'),
            'field_type' => DS_FIELD_TYPE_FUNCTION,
            'ui_limit' => array('persona|data'),
            'function' => '_gie_data_data_count',
        );
        return array($entity_type => $fields);
    }
    return;
}

/**
 * Custom function to return Title and Count based on Persona type for the data page
 */
function _gie_data_data_count($field) {
    $persona_type = field_get_items('node', $field['entity'], 'field_persona_type');

    if (isset($persona_type)) {

        switch ($persona_type[0]['value']) {
            case "innovation":
                $count = db_query('SELECT COUNT(nid) FROM {node} WHERE type = :type AND status = :status', array(':type' => 'innovation', ':status' => 1))->fetchField();
                return '<div class="data-point data-point--innovation"><a href="/innovations">' . $count . ' <span>Innovations</span></a></div>';
                break;
            case "funding":
                // get sum of funding grant award
                $query = db_select('field_data_field_funding_grant_award_value', 'g');
                $query->leftJoin('field_data_field_funding_deadline', 'd', 'g.entity_id = d.entity_id'); // join deadline field table
                $query
                    ->condition('g.deleted', 0)
                    ->where('d.field_funding_deadline_value > CURDATE() OR d.field_funding_deadline_value IS NULL'); // deadline has not passed yet or doesn't exist
                $query->addExpression('SUM(field_funding_grant_award_value_value)', 'sum'); // sum of grant award values
                $count = $query->execute()->fetchField();

                // set correct number abbreviation + suffix
                if($count>1000000000) $count = round(($count/1000000000),1).'B';
                else if($count>1000000) $count = round(($count/1000000),1).'M';
                else if($count>1000) $count = round(($count/1000),1).'K';

                return '<div class="data-point data-point--funding"><a href="/funding">$' . $count . ' <span>Available</span></a></div>';
                break;
            case "user":
                $count = db_query('SELECT COUNT(uid) FROM {users} WHERE status > :status', array(':status' => 0))->fetchField();
                return '<div class="data-point data-point--user"><a href="/members">' . $count . ' <span>Collaborators</span></a></div>';
                break;
            case "org":
                $count = db_query('SELECT COUNT(nid) FROM {node} WHERE type = :type AND status = :status', array(':type' => 'organization', ':status' => 1))->fetchField();
                return '<div class="data-point data-point--org"><a href="/organizations">' . $count . ' <span>Organizations</span></a></div>';
                break;
        }

        return $result;

    }
}


function gie_data_datalayer_alter(&$data_layer) {
  $content = ['innovation', 'funding', 'resource'];
  if (isset($data_layer['entityBundle']) && (in_array($data_layer['entityBundle'], $content))) {
    $data_layer['entityLabel'] = strtolower($data_layer['entityLabel']);
    $type = FALSE;
    if ($obj = _datalayer_menu_get_any_object($type)) {
      $taxonomy = _datalayer_get_entity_terms('node', $data_layer['entityBundle'], $obj);
      $flag_counts = flag_get_counts('node', $obj->nid);
      if (!empty($flag_counts)) {
        $data_layer['entityFavoriteFlag'] = $flag_counts['favorite'];
      }
      if (!empty($obj->comment_count)) {
        $data_layer['entityComments'] = $obj->comment_count;
      }
      if (!empty($obj->field_innovation_proof_evidence)) {
        $data_layer['entityEvidence'] = count(
          $obj->field_innovation_proof_evidence[LANGUAGE_NONE]
        );
      }
      if (!empty($obj->field_funding_grant_award_value)) {
        $data_layer['entityGrantAward'] = $obj->field_funding_grant_award_value[LANGUAGE_NONE][0]['value'];
      }
      if (!empty($taxonomy['topic'])) {
        $data_layer['entityTermTopic']  = implode(';', array_values($taxonomy['topic']));
      }
      if (!empty($taxonomy['sector'])) {
        $data_layer['entityTermSector']  = implode(';', array_values($taxonomy['sector']));
      }
      if (!empty($taxonomy['region'])) {
        $data_layer['entityTermRegion']  = implode(';', array_values($taxonomy['region']));
      }
      if (!empty($taxonomy['solution_type'])) {
        $data_layer['entityInnovationType']  = implode(';', array_values($taxonomy['solution_type']));
      }
      if (!empty($taxonomy['innovation_stage'])) {
        $data_layer['entityInnovationStage']  = implode(';', array_values($taxonomy['innovation_stage']));
      }
      if (!empty($taxonomy['funding_type'])) {
        $data_layer['entityFundingType']  = implode(';', array_values($taxonomy['funding_type']));
      }
    }
  }

  if (!(user_is_anonymous())) {
    global $user;
    if (!empty($userobj = user_load($user->uid))) {
      $taxonomy = _datalayer_get_entity_terms('user', 'user', $userobj);
      if (!empty($taxonomy['assistance_type'])) {
        $data_layer['userAssistance']  = implode(';', array_values($taxonomy['assistance_type']));
      }
      if (!empty($userobj->field_user_org)) {
        foreach ($userobj->field_user_org[LANGUAGE_NONE] as $org) {
          $org = node_load($org['target_id']);
          if (!empty($org->title)) {
            $data_layer['userOrg'][]  = $org->title;
          }
        }
        $data_layer['userOrg'] = implode(';', $data_layer['userOrg']);
      }
      if (!empty($taxonomy['user_type'])) {
        $data_layer['userType']  = implode(';', array_values($taxonomy['user_type']));
      }
      if (!empty($taxonomy['sector'])) {
        $data_layer['userTermSector']  = implode(';', array_values($taxonomy['sector']));
      }
      if (!empty($taxonomy['region'])) {
        $data_layer['userTermRegion']  = implode(';', array_values($taxonomy['region']));
      }
      if (!empty($taxonomy['topic'])) {
        $data_layer['userInterests']  = implode(';', array_values($taxonomy['topic']));
      }
      if (!empty($taxonomy['user_skills'])) {
        $data_layer['userSkills']  = implode(';', array_values($taxonomy['user_skills']));
      }
      if (!empty($userobj->field_user_address) && !empty($userobj->field_user_address[LANGUAGE_NONE][0]['country'])) {
        $data_layer['userAddressCountry']  = $userobj->field_user_address[LANGUAGE_NONE][0]['country'];
      }
      if (!empty($userobj->timezone)) {
        $data_layer['userTimezone']  = $userobj->timezone;
      }
      if (!empty($userobj->field_language_preference) && !empty($userobj->field_language_preference['und'][0]['value'])) {
        $data_layer['userLanguagePreference']  = $userobj->field_language_preference['und'][0]['value'];
      }
    }
  }

  if (!empty($_SERVER['HTTP_SLINKS_TRANSLATE'])) {
    $data_layer['languageCode'] = $_SERVER['HTTP_SLINKS_TRANSLATE'];
  } else {
    $data_layer['languageCode'] = 'en';
  }

  if (!empty($data_layer['entityCreated'])) {
    $fieldDate = new DateObject($data_layer['entityCreated']);
    $data_layer['entityCreated'] = $fieldDate->format('Y/m/d');
  }

}