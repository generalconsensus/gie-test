<?php
/**
 * @file
 * Code for the GIE Messages feature.
 */

include_once 'gie_messages.features.inc';

/**
 * Implements hook_mail_alter().
 * - TEMPORARY: send digest emails to f1 via bcc
 */
function gie_messages_mail_alter(&$message)
{
  if ($message['key'] == 'digest') {
    $message['headers']['bcc'] = 'aklatsky@forumone.com, mdrayer@forumone.com, dmcdermott@forumone.com, mburge@forumone.com';
  }
}

/**
 * Implements hook_comment_insert().
 * - Trigger Comment Notify message
 */
function gie_messages_comment_insert($comment) {
  $node = node_load($comment->nid);
  if ($comment->uid == $node->uid) {
    // Same comment author as node author
    return;
  }

  $user = entity_metadata_wrapper('user', $node->uid);
  // Get User Notifications frequency field
  $notifier_name = _gie_messages_get_notifier_name($user);
  // Get "Notify comment" field
  $notify_comment = $user->field_user_mail_comment->value();

  if ($notifier_name == 'do_not_send' || !$notify_comment) {
    // user set to not receive emails
    return;
  }

  $message = message_create('comment_notify', array('uid' => $node->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node_ref->set($node);
  $wrapper->field_comment_ref->set($comment);
  // Save before message_notify_send_message, or else mid won't exist for message digest to use
  $wrapper->save();

  // Send message using Message Notify
  message_notify_send_message($message, array(), $notifier_name);
}

/**
 * Implements hook_flag_flag().
 * - Trigger Follow: User Notify message
 * - Trigger Favorite Notify message
 */
function gie_messages_flag_flag($flag, $content_id, $account, $flagging) {
  switch($flag->name) {
    case 'favorite':

      // Load node entity and check for node author
      $node = node_load($content_id);

      if ($account->uid == $node->uid) {
        // Author flagged own content, do nothing. Break statement now.
        break;
      }

      $user = entity_metadata_wrapper('user', $node->uid);
      // Get User Notifications frequency field
      $notifier_name = _gie_messages_get_notifier_name($user);
      // Get "Notify content follow" field
      $notify_follow = $user->field_user_mail_content_follow->value();

      if ($notifier_name == 'do_not_send' || !$notify_follow) {
        // user set to not receive emails, break statement
        break;
      }

      // Check for previous Favorite Notify messages
      $query = db_select('field_data_field_user_ref', 'u');
      $query->join('field_data_field_node_ref', 'n', 'u.entity_id=n.entity_id');
      $query->fields('u', array('entity_id', 'bundle', 'field_user_ref_target_id'));
      $query->fields('n', array('field_node_ref_target_id'));
      $query->condition('u.bundle','favorite_notify','=');
      $query->condition('u.field_user_ref_target_id',$account->uid,'=');
      $query->condition('n.field_node_ref_target_id',$content_id,'=');

      $result = $query->execute();
      if ($result->rowCount() > 0) {
        // Favorite Notify message has been previously created and sent
        // To prevent spam, do not create/send more. Break statement now.
        break;
      }

      // Set message entity
      $message = message_create('favorite_notify', array('uid' => $node->uid));
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_node_ref->set($node);
      $wrapper->field_flag_ref->set($flagging);
      $wrapper->field_user_ref->set($account);
      // Save before message_notify_send_message, or else mid won't exist for message digest to use
      $wrapper->save();

      // Send message using Message Notify
      message_notify_send_message($message, array(), $notifier_name);

      break;
    case 'follow':

      if ($account->uid == $content_id) {
        // User flagged self, do nothing.
        break;
      }

      $user = entity_metadata_wrapper('user', $content_id);
      // Get notifier name based on user (content id)
      $notifier_name = _gie_messages_get_notifier_name($user);
      // Get "Notify user follow" field
      $notify_follow = $user->field_user_mail_user_follow->value();

      if ($notifier_name == 'do_not_send' || !$notify_follow) {
        // user set to not receive emails, break statement
        break;
      }

      // Check for previous Follow: User Notify messages
      $query = db_select('field_data_field_user_ref', 'u');
      $query->join('message', 'm', 'u.entity_id=m.mid');
      $query->fields('u', array('entity_id', 'bundle', 'field_user_ref_target_id'));
      $query->fields('m', array('uid'));
      $query->condition('u.bundle','follow_user_notify','=');
      $query->condition('u.field_user_ref_target_id',$account->uid,'=');
      $query->condition('m.uid',$content_id,'=');

      $result = $query->execute();
      if ($result->rowCount() > 0) {
        // Follow: User Notify message has been previously created and sent
        // To prevent spam, do not create/send more. Break statement now.
        break;
      }

      // Set message entity
      $message = message_create('follow_user_notify', array('uid' => $content_id));
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_user_ref->set($account);
      $wrapper->field_flag_ref->set($flagging);
      // Save before message_notify_send_message, or else mid won't exist for message digest to use
      $wrapper->save();

      // Send message using Message Notify
      message_notify_send_message($message, array(), $notifier_name);

      break;
  }
}

/**
 * Implements hook_node_update().
 * - Trigger Node Update Notify message
 */
function gie_messages_node_update($node) {
  // Load Favorite flag
  $flag = flag_get_flag('favorite');
  // End if flag not found
  if (!$flag) return;

  // Get users who have favorited this node
  $query = db_select('flagging', 'f');
  $query->fields('f');
  $query->condition('entity_id',$node->nid,'=');
  $query->condition('fid',$flag->fid,'=');

  $result = $query->execute();

  foreach($result as $record) {

    $uid = $record->uid;
    if ($uid == $node->uid) {
      // If user is node author, skip to next user
      continue;
    }

    $user = entity_metadata_wrapper('user', $uid);
    // Get notifier name based on user
    $notifier_name = _gie_messages_get_notifier_name($user);
    // Get "Notify user follow" field
    $notify_edit = $user->field_user_mail_follow_edit->value();

    if ($notifier_name == 'do_not_send' || !$notify_edit) {
      // user set to not receive emails, skip to next user
      continue;
    }

    // Get specific node update notifications from past 24 hours to user
    $q = db_select('message', 'm');
    $q->join('field_data_field_node_ref','n','m.mid=n.entity_id');
    $q->fields('m',array('mid','type','uid','timestamp'));
    $q->fields('n',array('field_node_ref_target_id'));
    $q->condition('m.type','node_update_notify','=');
    $q->condition('m.uid',$uid,'=');
    $q->condition('n.field_node_ref_target_id',$node->nid,'=');
    $q->condition('m.timestamp',(time() - 86400),'>'); // 86400 = 1 day

    $r = $q->execute();
    if($r->rowCount() > 0) {
      // If messages found, skip to next user
      // Limits node update notifications to once every 24 hours
      continue;
    }

    // Set message entity
    $message = message_create('node_update_notify', array('uid' => $uid));
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_node_ref->set($node);
    // Save before message_notify_send_message, or else mid won't exist for message digest to use
    $wrapper->save();

    // Send message using Message Notify
    message_notify_send_message($message, array(), $notifier_name);
  }
}

/**
 * Implements hook_node_insert().
 * - Trigger User Follow Create message (send message to all followers of node author)
 */
function gie_messages_node_insert($node) {
  switch($node->type) {
    case 'innovation':
    case 'resource':
    case 'funding':
      // load Follow flag
      $flag = flag_get_flag('follow');
      // End if flag not found
      if (!$flag) break;

      // initiate send and do not send lists
      $do_not_send_list = [];
      $send_list = [];

      // Get all users currently following node author
      $query = db_select('flagging', 'f');
      $query->fields('f');
      $query->condition('entity_id',$node->uid,'=');
      $query->condition('fid',$flag->fid,'=');

      $result = $query->execute();

      foreach($result as $record) {
        $uid = $record->uid;
        if ($uid == $node->uid) {
          // If user is node author, skip to next user
          continue;
        }

        // Get notifier name based on user
        $user = entity_metadata_wrapper('user', $uid);
        $notifier_name = _gie_messages_get_notifier_name($user);
        if ($notifier_name == 'do_not_send') {
          // add user to "do not send" list
          $do_not_send_list[] = $uid;
          // user set to not receive emails, skip to next user
          continue;
        }

        // Add user to send list
        $send_list[] = $uid;

        // Set message entity
        $message = message_create('user_follow_create', array('uid' => $uid));
        $wrapper = entity_metadata_wrapper('message', $message);
        $wrapper->field_node_ref->set($node);
        // Save before message_notify_send_message, or else mid won't exist for message digest to use
        $wrapper->save();

        // Send message using Message Notify
        message_notify_send_message($message, array(), $notifier_name);
      }

      // ONLY DO THE FOLLOWING FOR INNOVATION AND FUNDING. SKIP FOR RESOURCE
      if ($node->type == 'resource') break;
      $lang = $node->language;
      $sectors = $node->field_term_sector[$lang];
      $sector_list = array();

      foreach($sectors as $sector) {
        $sector_list[] = $sector['tid'];
      }
      if (!empty($sector_list)) {
        // Set message machine name based on node content type
        $message_name = ($node->type == 'innovation') ? 'innovation_recommendation' : 'funding_recommendation';

        // Get all users currently following sector term
        $query = db_select('field_data_field_term_sector', 'f');
        $query->fields('f',array('entity_id'));
        $query->distinct();
        $query->condition('entity_type','user','=');
        $query->condition('field_term_sector_tid',$sector_list,'IN');

        $sector_result = $query->execute();

        while($record = $sector_result->fetchAssoc()){
          $uid = $record['entity_id'];
          // skip users found via 'user_follow_create' process
          if (in_array($uid, $send_list) || in_array($uid, $do_not_send_list)) continue;
          // skip node author
          if ($uid == $node->uid) {
            // If user is node author, skip to next user
            continue;
          }
          // Get notifier name based on user
          $user = entity_metadata_wrapper('user', $uid);
          // Get User Notifications frequency field
          $notifier_name = _gie_messages_get_notifier_name($user);
          $user_fields = $user->value();
          $innovation_rec =  !empty($user_fields->field_user_mail_innovation_rec) ? $user->field_user_mail_innovation_rec->value() : 0;
          $funding_rec =  !empty($user_fields->field_user_mail_funding_rec) ? $user->field_user_mail_funding_rec->value() : 0;
          // Get Recommendation Notify field appropriate for the node content type
          $notify_recommendation = ($node->type == 'innovation') ? $innovation_rec : $funding_rec;
          if ($notifier_name == 'do_not_send' || !$notify_recommendation) {
            // add user to "do not send" list
            $do_not_send_list[] = $uid;
            // user set to not receive emails, skip to next user
            continue;
          }

          // check for Innovation or Funding content type.
          // Set message entity
          $message = message_create($message_name, array('uid' => $uid));
          $wrapper = entity_metadata_wrapper('message', $message);
          $wrapper->field_node_ref->set($node);
          // Save before message_notify_send_message, or else mid won't exist for message digest to use
          $wrapper->save();

          // Send message using Message Notify, force to weekly digest
          message_notify_send_message($message, array(), 'digest_week');
        }
      }
      break;
  }
}

/**
 * Helper function to get notifier name
 * @param $user
 *   User object
 * @return string
 *   Notifier Name
 */
function _gie_messages_get_notifier_name($user) {
  $notification = $user->field_user_notifications->value();

  // Get notifier based on email message frequency of user
  switch($notification) {
    case 'daily':
      $notifier_name = 'digest_day';
      break;
    case 'weekly':
      $notifier_name = 'digest_week';
      break;
    case 'no_email':
      $notifier_name = 'do_not_send';
      break;
    default:
      $notifier_name = 'email'; //send immediately
  }

  return $notifier_name;
}
